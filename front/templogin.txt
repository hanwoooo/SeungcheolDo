import React, { useState } from 'react';
import { StyleSheet, Text, View, TextInput, Button, Alert } from 'react-native';
import { StackNavigationProp } from '@react-navigation/stack';
import { AuthStackParamList } from '../../navigations/stack/AuthStackNavigator';
import apiClient from '../../api/apiClient';
import { authNavigations } from '../../constants/navigations';

type LoginScreenNavigationProp = StackNavigationProp<AuthStackParamList, typeof authNavigations.LOGIN>;

type LoginScreenProps = {
  navigation: LoginScreenNavigationProp;
};

const LoginScreen: React.FC<LoginScreenProps> = ({ navigation }) => {
  const [userId, setUserId] = useState<string>('');
  const [password, setPassword] = useState<string>('');

  const handleLogin = async () => {
    try {
      const response = await apiClient.post('/member/login', {
        memberEmail: userId,
        memberPassword: password,
      });
      //여기서 부터 실행이 안됨

      if (response.status === 200) {
        console.log('로그인 성공', '홍 화면')
        Alert.alert('로그인 성공', '축하한다 준현아.');
        navigation.navigate(authNavigations.AUTH_HOME);
      }
    } catch (error: any) {
      if (error.response && error.response.status === 401) {
        Alert.alert('로그인 실패', '아이디 또는 비밀번호가 올바르지 않습니다.');
      } else {
        console.error('로그인 오류:', error);
        Alert.alert('로그인 실패', '예기치 않은 오류가 발생했습니다. 다시 시도해 주세요.');
      }
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>로그인 스크린</Text>
      <TextInput
        placeholder="아이디"
        value={userId}
        onChangeText={setUserId}
        style={styles.input}
      />
      <TextInput
        placeholder="비밀번호"
        value={password}
        onChangeText={setPassword}
        secureTextEntry
        style={styles.input}
      />
      <Button title="로그인" onPress={handleLogin} />
    </View>
  );
};

export default LoginScreen;

const styles = StyleSheet.create({
  container: {
    padding: 20,
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 10,
    paddingHorizontal: 10,
    width: '100%',
  },
});






///////////////////////////////////////////////////////////
 const [values, setValues] = useState({
    email: '',
    password: '',
  });
  const [touched, setTouched] = useState({
    email: false,
    password: false,
  });

  const handleChangeText = (name: string, text: string) => {
    setValues({
      ...values,
      [name]: text,
    });
  };
  const handleBlur = (name: string) => {
    setTouched({
      ...touched,
      [name]: true,
    });
  };
