import React, { useState, useRef, useMemo } from "react";
import {
  View,
  TextInput,
  Image,
  StyleSheet,
  Text,
  Pressable,
  FlatList,
} from "react-native";
import { useSafeAreaInsets } from "react-native-safe-area-context";
import Ionicons from "react-native-vector-icons/Ionicons";
import { CompositeNavigationProp, useNavigation } from "@react-navigation/native";
import { StackNavigationProp } from "@react-navigation/stack";
import { DrawerNavigationProp } from "@react-navigation/drawer";
import BottomSheet, { BottomSheetView } from "@gorhom/bottom-sheet";
import { searchStation } from "@/api/auth";
import { StationData } from "@/types/domain";
import { MapStackParamList } from "@/navigations/stack/MapStackNavigator";
import { MainDrawerParamList } from "@/navigations/drawer/MainDrawerNavigator";
import { colors } from "@/constants";

type Navigation = CompositeNavigationProp<
  StackNavigationProp<MapStackParamList>,
  DrawerNavigationProp<MainDrawerParamList>
>;

function MapHomeScreen() {
  const inset = useSafeAreaInsets();
  const navigation = useNavigation<Navigation>();
  const [stationInput, setStationInput] = useState("");
  const [stationData, setStationData] = useState<StationData | null>(null);
  const [selectedLine, setSelectedLine] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const bottomSheetRef = useRef<BottomSheet>(null);
  const snapPoints = useMemo(() => ["30%"], []);

  // 역 검색 로직
  const handleSearch = async () => {
    try {
      setError(null);
      const data = await searchStation({ stationInput });

      if (!data || !data.connectedStations) {
        setError("유효하지 않은 데이터입니다.");
        return;
      }

      setStationData(data);
      const firstLine = Object.keys(data.connectedStations)[0];
      setSelectedLine(firstLine || null);
      bottomSheetRef.current?.expand();
    } catch (error) {
      console.error("역 검색 중 오류 발생:", error);
      setError("역 정보를 불러오는 데 실패했습니다.");
    }
  };

  return (
    <>
      {/* 배경과 검색 */}
      <View style={styles.container}>
        <TextInput
          style={styles.input}
          placeholder="역 검색칸"
          value={stationInput}
          onChangeText={setStationInput}
          onSubmitEditing={handleSearch}
        />
        <Image
          resizeMode="contain"
          style={styles.image}
          source={require("@/assets/loadview.png")}
        />
      </View>

      {/* Drawer 버튼 */}
      <Pressable
        style={[styles.drawerButton, { top: inset.top || 20 }]}
        onPress={() => navigation.openDrawer()}
      >
        <Ionicons name="menu" color={colors.WHITE} size={25} />
      </Pressable>

      {/* Bottom Sheet */}
      <BottomSheet ref={bottomSheetRef} index={-1} snapPoints={snapPoints}>
        <BottomSheetView style={styles.bottomSheetContent}>
          {error ? (
            <Text style={styles.errorText}>{error}</Text>
          ) : !stationData || !selectedLine ? (
            <Text style={styles.placeholder}>역 정보를 검색하세요.</Text>
          ) : (
            <>
              {/* 상단: 역 이름 및 선택된 노선 */}
              <Text style={styles.stationName}>{stationData.stationName}</Text>
              <Text style={styles.lineInfo}>현재 노선: {selectedLine}</Text>

              {/* 중단: 노선 선택 버튼 */}
              <FlatList
                horizontal
                data={Object.keys(stationData.connectedStations)}
                keyExtractor={(line) => line}
                renderItem={({ item }) => (
                  <Pressable
                    style={[
                      styles.lineButton,
                      item === selectedLine && styles.selectedLineButton,
                    ]}
                    onPress={() => setSelectedLine(item)}
                  >
                    <Text style={styles.lineButtonText}>{item}</Text>
                  </Pressable>
                )}
              />

              {/* 하단: 이전/다음 역 */}
              {stationData.connectedStations[selectedLine] ? (
                <View style={styles.neighborStations}>
                  <Text style={styles.neighborText}>
                    이전 역: {stationData.connectedStations[selectedLine].previous || "없음"}
                  </Text>
                  <Text style={styles.neighborText}>
                    다음 역: {stationData.connectedStations[selectedLine].next || "없음"}
                  </Text>
                </View>
              ) : (
                <Text>노선 데이터가 없습니다.</Text>
              )}
            </>
          )}
        </BottomSheetView>
      </BottomSheet>
    </>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },
  input: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    zIndex: 10,
    height: 50,
    borderColor: colors.GRAY_500,
    borderWidth: 1,
    paddingHorizontal: 10,
    backgroundColor: colors.GRAY_200,
  },
  image: {
    flex: 1,
    width: "100%",
    height: "100%",
  },
  drawerButton: {
    position: "absolute",
    left: 0,
    top: 20,
    paddingVertical: 10,
    paddingHorizontal: 12,
    backgroundColor: colors.BLUE_500,
    borderTopRightRadius: 50,
    borderBottomRightRadius: 50,
    shadowColor: colors.BLACK,
    shadowOffset: { width: 1, height: 1 },
    shadowOpacity: 0.5,
    elevation: 4,
  },
  bottomSheetContent: { flex: 1, alignItems: "center", padding: 20 },
  stationName: { fontSize: 18, fontWeight: "bold", marginBottom: 10 },
  lineInfo: { fontSize: 16, marginBottom: 10 },
  lineButton: {
    padding: 10,
    backgroundColor: "#f0f0f0",
    borderRadius: 5,
    marginHorizontal: 5,
  },
  selectedLineButton: { backgroundColor: "#007bff" },
  lineButtonText: { color: "#000" },
  neighborStations: { marginTop: 20 },
  neighborText: { fontSize: 14, marginVertical: 5 },
  placeholder: { textAlign: "center", fontSize: 16, color: "#aaa" },
  errorText: { color: "red", fontSize: 14, textAlign: "center" },
});

export default MapHomeScreen;
