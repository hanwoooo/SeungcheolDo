import React, { useState } from 'react';
import { Alert, Keyboard, StyleSheet, View } from 'react-native';
import SearchInput from '@/components/SearchInput';
import { useNavigation } from '@react-navigation/native';
import type { StackNavigationProp } from '@react-navigation/stack'; // 타입 가져오기
import { searchStation } from '@/api/auth';
import { mapNavigations } from '@/constants';
import { MapStackParamList } from '@/navigations/stack/MapStackNavigator';

// Navigation Prop 타입 정의
type NavigationProp = StackNavigationProp<MapStackParamList, 'StationSearch'>;

function StationSearch() {
  const [keyword, setKeyword] = useState<string>(''); // 사용자 입력 관리
  const navigation = useNavigation<NavigationProp>(); // Navigation 타입 설정

  // 검색어 변경 핸들러
  const handleChangeKeyword = (text: string) => {
    setKeyword(text);
  };

  // 검색 동작
  const handleSearchSubmit = async () => {
    if (!keyword.trim()) {
      Alert.alert('검색어를 입력하세요.');
      return;
    }

    try {
      // 서버로 검색어 전달 후 데이터 요청
      const data = await searchStation({ stationInput: keyword });
      if (!data) {
        console.error('서버에서 데이터를 가져오지 못했습니다.');
        return;
      }
      // 검색된 데이터를 MapHomeScreen으로 전달하며 화면 전환
      navigation.navigate(mapNavigations.MAP_HOME, { stationData: data }); // mapNavigations 사용
    } catch (error) {
      console.error('서버 요청 중 오류 발생:', error);
    } finally {
      Keyboard.dismiss(); // 키보드 닫기
    }
  };

  return (
    <View style={styles.container}>
      <SearchInput
        value={keyword} // 입력 값
        onChangeText={handleChangeKeyword} // 입력 변경 핸들러
        placeholder="검색할 장소를 입력하세요."
        onSubmit={handleSearchSubmit} // 검색 시 실행
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    padding: 20,
  },
});

export default StationSearch;
