import React, { useState, useEffect } from "react";
import { View, Text, TextInput, Button, StyleSheet } from "react-native";
import apiClient from "@/api/apiClient";
import { StationData } from "@/types/domain";


const StationInfo = () => {
  const [stationData, setStationData] = useState<StationData | null>(null); // 서버 데이터 상태
  const [stationInput, setStationInput] = useState<string>(""); // 입력된 역 번호
  const [currentLine, setCurrentLine] = useState<string>("1"); // 기본 노선
  const [error, setError] = useState<string | null>(null); // 에러 상태
  const [loading, setLoading] = useState<boolean>(false); // 로딩 상태

  // 서버 데이터 가져오기
  const fetchStationData = async () => {
    try {
      setLoading(true); // 로딩 시작
      setError(null); // 에러 초기화

      const response = await apiClient.post("/stations", null, {
        params: {
          stationName: stationInput, // 입력한 역 번호를 서버로 전달
        },
      });
      const data: StationData = response.data;

      // 서버 응답 데이터 유효성 검사
      if (!data || !data.connectedStations) {
        setError("유효하지 않은 데이터입니다.");
        return;
      }

      setStationData(data);

      // 서버에서 전달받은 첫 번째 노선을 기본으로 설정
      const firstLine = Object.keys(data.connectedStations)[0];
      if (firstLine) {
        setCurrentLine(firstLine);
      } else {
        setError("노선 데이터가 없습니다.");
      }
    } catch (err) {
      setError("역 정보를 불러오는 데 실패했습니다.");
      console.error(err);
    } finally {
      setLoading(false); // 로딩 종료
    }
  };

  return (
    <View style={styles.container}>
      {/* 텍스트 인풋 */}
      <TextInput
        style={styles.input}
        placeholder="역 번호를 입력하세요"
        value={stationInput}
        onChangeText={setStationInput} // 입력 값 업데이트
        keyboardType="numeric" // 숫자 키패드
      />
      <Button title="검색" onPress={fetchStationData} />

      {/* 에러 메시지 */}
      {error && <Text style={styles.error}>{error}</Text>}

      {/* 로딩 상태 */}
      {loading && <Text style={styles.loading}>로딩 중...</Text>}

      {/* 데이터 렌더링 */}
      {stationData && (
        <>
          {/* 현재 역 정보 */}
          <Text style={styles.title}>현재 역: {stationData.stationName}</Text>
          <Text style={styles.subtitle}>현재 노선: {currentLine}</Text>

          {/* 이전역/다음역 정보 */}
          {stationData.connectedStations[currentLine] ? (
            <View style={styles.connection}>
              <Text>
                이전 역:{" "}
                {stationData.connectedStations[currentLine].previous === "none"
                  ? "없음"
                  : stationData.connectedStations[currentLine].previous}
              </Text>
              <Text>
                다음 역:{" "}
                {stationData.connectedStations[currentLine].next === "none"
                  ? "없음"
                  : stationData.connectedStations[currentLine].next}
              </Text>
            </View>
          ) : (
            <Text>선택한 노선에 대한 정보가 없습니다.</Text>
          )}

          {/* 노선 변경 버튼 */}
          {Object.keys(stationData.connectedStations).length > 1 &&
            Object.keys(stationData.connectedStations).map((line) => (
              <Button
                key={line}
                title={`노선 ${line} 보기`}
                onPress={() => setCurrentLine(line)}
                disabled={line === currentLine} // 현재 선택된 노선은 비활성화
              />
            ))}
        </>
      )}
    </View>
  );
};

export default StationInfo;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: "#fff",
  },
  input: {
    height: 40,
    borderColor: "#ccc",
    borderWidth: 1,
    marginBottom: 10,
    paddingHorizontal: 8,
    borderRadius: 4,
  },
  title: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 10,
  },
  subtitle: {
    fontSize: 18,
    marginBottom: 10,
  },
  connection: {
    marginBottom: 10,
  },
  error: {
    color: "red",
    marginBottom: 10,
  },
  loading: {
    fontSize: 16,
    color: "#888",
    marginBottom: 10,
  },
});
