import React from "react";
import { View, Text, StyleSheet, TouchableOpacity } from "react-native";
import BottomSheet, { BottomSheetView } from "@gorhom/bottom-sheet";
import { colors } from "@/constants";

interface StationBottomSheetProps {
  stationData: any | null; // 역 정보
  currentLine: string | null; // 현재 선택된 노선
  setCurrentLine: (line: string) => void; // 노선 변경 함수
  bottomSheetRef: React.RefObject<BottomSheet>; // BottomSheet 참조
  snapPoints: string[]; // SnapPoints 설정
}

const StationBottomSheet: React.FC<StationBottomSheetProps> = ({
  stationData,
  currentLine,
  setCurrentLine,
  bottomSheetRef,
  snapPoints,
}) => {
  // 노선 버튼 렌더링 함수
  const renderLineButtons = () => {
    return Object.keys(stationData.connectedStations).map((line) => (
      <TouchableOpacity
        key={line}
        style={[
          styles.lineButton,
          line === currentLine && styles.activeLineButton,
        ]}
        onPress={() => setCurrentLine(line)}
      >
        <Text
          style={[
            styles.lineButtonText,
            line === currentLine && styles.activeLineButtonText,
          ]}
        >
          {line}
        </Text>
      </TouchableOpacity>
    ));
  };

  return (
    <BottomSheet
      ref={bottomSheetRef}
      index={stationData ? 1 : -1}
      snapPoints={snapPoints}
    >
      <BottomSheetView style={styles.bottomSheetContent}>
        {stationData ? (
          <View style={styles.contentContainer}>
            {/* 역 이름 */}
            <Text style={styles.stationName}>{stationData.stationName}</Text>

            {/* 노선 변경 버튼 */}
            <View style={styles.lineButtonsContainer}>
              {renderLineButtons()}
            </View>

            {/* 이전 역과 다음 역 정보 */}
            <View style={styles.stationInfoContainer}>
              {currentLine ? (
                <>
                  <View style={styles.stationInfoBoxLeft}>
                    <Text style={styles.stationInfoLabel}>이전 역</Text>
                    <Text style={styles.stationInfoValue}>
                      {stationData.connectedStations[currentLine]?.previous ||
                        "없음"}
                    </Text>
                  </View>
                  <View style={styles.stationInfoBoxRight}>
                    <Text style={styles.stationInfoLabel}>다음 역</Text>
                    <Text style={styles.stationInfoValue}>
                      {stationData.connectedStations[currentLine]?.next ||
                        "없음"}
                    </Text>
                  </View>
                </>
              ) : (
                <Text>노선을 선택하세요.</Text>
              )}
            </View>
          </View>
        ) : (
          <Text>정보가 없습니다. 검색 후 확인해주세요.</Text>
        )}
      </BottomSheetView>
    </BottomSheet>
  );
};

const styles = StyleSheet.create({
  bottomSheetContent: {
    flex: 1,
    alignItems: "center",
    padding: 20,
    borderTopStartRadius: 70,
    borderTopEndRadius: 70,
    backgroundColor: colors.WHITE,
    shadowColor: colors.BLACK,
    shadowOffset: { width: 0, height: -6 },
    shadowOpacity: 0.4,
    shadowRadius: 15,
    elevation: 12,
    borderWidth: 1,
    borderColor: colors.GRAY_200,
  },
  contentContainer: {
    width: "100%",
    alignItems: "center",
  },
  stationName: {
    fontSize: 40,
    fontWeight: "bold",
    color: colors.BLACK,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: colors.RED_500,
    paddingHorizontal: 30,
    paddingVertical: 10,
    borderRadius: 20,
  },
  lineButtonsContainer: {
    flexDirection: "column", // 세로 방향으로 정렬
    alignItems: "flex-start", // 왼쪽 정렬
    marginBottom: 20, // 아래쪽 여백
    paddingLeft: 10, // 왼쪽 여백 (옵션)
    width: "100%",
  },
  
  lineButton: {
    backgroundColor: colors.GRAY_200,
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 8,
    marginHorizontal: 5,
  },
  activeLineButton: {
    backgroundColor: colors.RED_500,
  },
  lineButtonText: {
    fontSize: 14,
    color: colors.BLACK,
  },
  activeLineButtonText: {
    color: colors.WHITE,
    fontWeight: "bold",
    fontSize: 20,
  },
  stationInfoContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    width: "95%",
    marginTop: 10,
  },
  stationInfoBoxLeft: {
    flex: 1,
    alignItems: "flex-end",
    padding: 10,
    borderWidth: 1,
    borderColor: colors.GRAY_500,
    borderRadius: 20,
    marginRight: 10,
  },
  stationInfoBoxRight: {
    flex: 1,
    alignItems: "flex-start",
    padding: 10,
    borderWidth: 1,
    borderColor: colors.GRAY_500,
    borderRadius: 20,
    marginLeft: 10,
  },
  stationInfoLabel: {
    fontSize: 16,
    fontWeight: "bold",
    color: colors.GRAY_700,
    marginBottom: 5,
    paddingHorizontal: 10,
  },
  stationInfoValue: {
    fontSize: 50,
    fontWeight: "bold",
    color: colors.BLACK,
    padding: 10,
    paddingHorizontal: 20,
    borderTopWidth: 1,
    borderColor: colors.GRAY_500,
  },
});

export default StationBottomSheet;




<View style={styles.stationInfoContainer}>
              {currentLine ? (
                <>
                  <View style={styles.stationInfoBoxLeft}>
                    <Text style={styles.stationInfoLabel}>이전 역</Text>
                    <Text style={styles.stationInfoValue}>
                      {stationData.connectedStations[currentLine]?.previous ||
                        "없음"}
                    </Text>
                  </View>
                  <View style={styles.stationInfoBoxRight}>
                    <Text style={styles.stationInfoLabel}>다음 역</Text>
                    <Text style={styles.stationInfoValue}>
                      {stationData.connectedStations[currentLine]?.next ||
                        "없음"}
                    </Text>
                  </View>
                </>
              ) : (
                <Text>노선을 선택하세요.</Text>
              )}
            </View>